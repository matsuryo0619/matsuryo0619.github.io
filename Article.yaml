pages:
  art1:
    title: "2D RPG風ゲーム 1"
    data: "2025-2-22"
    public: true
    type: "article"
    content: |
      <div class='Mainmenu' data-ml='セーブコード'>
        <h3 t>セーブコード</h3>
        <input type='text' id='Savecode_input' placeholder='セーブコードを入力してね!' t>
        <div id='Player_progress' t></div>
      </div>
      <div class='Mainmenu' data-ml='技術'>
        <h3>技術</h3>
      </div>
    style: |
      #Savecode_input {
        
      }
    action: |
      const Savecode_input = document.getElementById('Savecode_input');

      if (localStorage.getItem('rpg1_userdata')) {
        Savecode_input.value = localStorage.getItem('rpg1_userdata');
      }

      // 初回ロードフラグ
      let isFirstLoad = !localStorage.getItem('rpg1_userdata');

      // イベントリスナーを正しく設定
      Savecode_input.addEventListener('input', function() {
        Change_progress();
        UpdateSavecode();
      });

      function Change_progress() {
        // localStorageからデータを取得、なければinputから取得
        let Savecode = localStorage.getItem('rpg1_userdata') || Savecode_input.value;

        // 初回ロード時、アイテムを保存する処理を行う
        if (isFirstLoad && Savecode) {
          const SaveData = Savecode.split(':');
          if (SaveData.length < 1) return;

          // アイテムが保存されていなければ、デフォルトのアイテムをセット
          if (SaveData.length <= 5) {
            Savecode = `${SaveData[0]}:${SaveData[1]}:${SaveData[2]}:${SaveData[3]}:${SaveData[4]}:アイテム1`; // デフォルトアイテムを追加
            localStorage.setItem('rpg1_userdata', Savecode); // 更新されたSavecodeをlocalStorageに保存
          }

          // 初回ロードフラグをfalseに変更
          isFirstLoad = false;
        }

        // Savecodeを分割してPlayerDataを生成
        const SaveData = Savecode.split(':');
        if (SaveData.length < 1) return;

        const PlayerData = {
          name: SaveData[0] || "名無し", // 名前が空なら「名無し」
          level: Number(SaveData[1]) || 1, // 数値変換（空なら1）
          RemaEXP: Number(SaveData[2]) || 0,
          hp: Number(SaveData[3]) || 100, // HP（空なら100）
          mp: Number(SaveData[4]) || 50, // MP（空なら50）
          gold: Number(SaveData[5]) || 0, // お金（空なら0）
          items: SaveData.slice(6) // アイテムは配列で格納
        };

        // アイテムを「名前 × 数量」の形で表示
        let itemText = PlayerData.items
          .map(item => {
            const [name, count] = item.split(',');
            return `${name} × ${count || 1}`; // 数量がない場合は1
          })
          .join('<br>'); // 改行を追加

        // プレイヤーの進行状況を表示
        const Player_progress = document.getElementById('Player_progress');
        Player_progress.innerHTML = `
          <p class='progress'>名前: ${PlayerData.name}</p>
          <p class='progress'>レベル: ${PlayerData.level}</p>
          <p class='progress'>残り経験値: ${PlayerData.RemaEXP}</p>
          <p class='progress'>現在HP: ${PlayerData.hp}</p>
          <p class='progress'>現在MP: ${PlayerData.mp}</p>
          <p class='progress'>所持金: ${PlayerData.gold}</p>
          <p class='progress'>アイテム:<br>${itemText}</p>
        `;
      }

      // SavecodeをlocalStorageに保存する関数
      function UpdateSavecode() {
        const Savecode = Savecode_input.value;
        localStorage.setItem('rpg1_userdata', Savecode);
      }

      // 初回ロード時にも進行状況を更新
      Change_progress();
  art2: 
    title: "にゃんこ大戦争 バトルシステム2"
    data: "2025-3-9"
    public: true
    type: "article"
    content: |

    style: |

    action: |
      
  art3:
    title: "スクラッチ講座 No.1"
    data: "2025-7-25"
    public: true
    type: "teach"
    content: |
      <div class="Mainmenu" data-ml="シリーズについて">
        <h3>シリーズについて</h3>
        <pre>
          こんにちは､<a href='https://scratch.mit.edu/users/matsumotoryoukotyann' target='_blank'>matsumotoryoukotyann</a>です
          このシリーズでは､
          ｢Scratchって何？｣、
          ｢Scratchってどうやったらいいの？｣
          という方への講座となります
        </pre>
      </div>
      <div class="Mainmenu" data-ml="Scratchについて">
        <h3>Scratchについて</h3>
        <pre>
          では､Scratchとはなんなのでしょう
          答えは､アメリカに位置するマサチューセッツ工科大学によって提供されているプログラミングサイトです

          Scratchの使用は､無料ででき､Emailがあれば､誰でも簡単にアカウントを作成できます
          アカウントの作り方は､<a href="https://matsuryo0619.github.io/scratchblog/article/article.html?data=4" target="_blank">こちら</a>で紹介しています

          Scratchは､テキストプログラミングとは違い､ブロックをはめ込んで作っていくので
          プログラミングをやってみたいという方に推奨できます
        </pre>
      </div>
      <div class="Mainmenu" data-ml="はじめてみよう！">
        <h3>はじめてみよう！</h3>
        <pre>
          では､早速始めてみましょう
          <a href="https://scratch.mit.edu/projects/editor" target="_blank">こちら</a>を開いてください

          すると、左側に以下のようなものが､たくさんあると思います
          <div class="scratchblocks">
            (10)歩動かす
            x座標を(0)、y座標を(0)にする
            など...::grey
          </div>
          これを､ブロックといいます　ブロックを､ドラッグ&ドロップすることで
          ブロックを組み立てることができるようになります
        </pre>
      </div>
      <div class="Mainmenu" data-ml="座標とは？">
        <h3>座標とは？</h3>
        <pre>
          では、ブロックに書いてある座標とはなんでしょうか
          座標とは、画面上の位置のことです
          Scratchでは、中央を0とします

          X座標は､横軸を、Y座標は縦軸を意味します
          X座標は､左に行けば行くほど数が小さくなり､右に行けば行くほど数が大きくなります
          Y座標は､下に行けば行くほど数が小さくなり､上に行けば行くほど数が大きくなります

          試しに､以下のようなコードを組んでみてください
          <div class="scratchblocks">
            @greenFlag が押されたとき
            x座標を(10)、y座標を(10)にする
          </div>
          実行欄の左上にある、緑の旗を押してみてください
          すると､猫が右上に移動したと思います

          次は､以下のようにコードを組んでみてください
          <div class="scratchblocks">
            @greenFlag が押されたとき
            x座標を (10)、y座標を (10)にする
            (1) 秒待つ
            x座標を (0)、y座標を (0)にする
          </div>
          すると､猫が右上に行き､1秒後に中央に戻るという動きをします
          つまり､Scratchは､<b>上から順にプログラムが実行される</b>ということになります
        </pre>
      </div>
    style: |
    action: |
      scratchblocks.renderMatching('.scratchblocks', {languages: ["ja"], style: "scratch3" });
  art4:
    title: "スクラッチ講座 番外編-1 アカウントの作り方"
    data: "2025-7-25"
    public: true
    type: "teach"
    content: |
      <div class="Mainmenu" data-ml="アカウントの作り方">
        <h3>アカウントの作り方</h3>
        <pre>
          こんにちは､<a href='https://scratch.mit.edu/users/matsumotoryoukotyann' target='_blank'>matsumotoryoukotyann</a>です
          今回は､Scratch講座 番外編ということで､Scratchアカウントの作り方を紹介していきたいと思います
        </pre>
      </div>
    style: |
    action: |
